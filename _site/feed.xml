<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Navaneeth Suresh</title>
    <description>themousepotato</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>How I spent May 2018 on learning Databases</title>
        <description>&lt;p&gt;Databases are the backbone of any software (credits: &lt;a href=&quot;https://github.com/DefCon-007&quot;&gt;@DefCon-007&lt;/a&gt;). But, it took a lot of time for me to understand this. I never understood the exact differences between using a spreadsheet for storing details and a RDBMS before. So, I started to study databases in depth.&lt;/p&gt;

&lt;h2 id=&quot;how-i-spent-may-2018-on-learning-databases&quot;&gt;How I spent May 2018 on learning Databases&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;understanding-concepts&quot;&gt;Understanding concepts&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/database-design.png&quot; alt=&quot;Database Design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Prerequisites are necessary before diving into a specific technology. I had MySQL in my 10+2 syllabus and I mugged the queries without having a deep understanding on the concepts of SQL. I do know how to write queries to get some specific data but, I had no idea about database design at that time.&lt;/p&gt;

&lt;p&gt;As recommended by &lt;a href=&quot;https://github.com/ghostwriternr/&quot;&gt;@ghostwriternr&lt;/a&gt;, I started watching a set of video tutorials on Database Design by Caleb Curry &lt;a href=&quot;https://www.youtube.com/watch?v=e7Pr1VgPK4w&amp;amp;index=1&amp;amp;list=PLlTjty5ceOnd-sCYEHlFO0JRg2liaFvxv&quot;&gt;here&lt;/a&gt;. I found this guy as super cool and highly contented. He explains each and every concepts in depth in a beginner friendly manner. I can’t even call it a lecture. It’s like your best friend teaching you a night before end sems. Very very user-friendly and informative.&lt;/p&gt;

&lt;p&gt;I got a clear idea about the things to be taken care of while designing databases. Throughout this course, he keep on talking about Data Integrity and reducing Data Redundancy. Lack of them may lead to wrong results on executing queries. Breaking data into Atomic values is also a good practice. He also briefly talks about SQL queries and specific filters. He explains each concepts with proper examples which can easily make us grasp. After watching his videos you won’t be actually implementing anything but, will have a deeper understanding on RDBMS. Nobody can do this course without recommending to others.&lt;/p&gt;

&lt;h3 id=&quot;peek-into-nosql-through-mongodb&quot;&gt;Peek into NoSQL through MongoDB&lt;/h3&gt;
&lt;p&gt;I was in a mood to apply the concepts that I’ve learnt in Caleb’s course. So, do I need to start with SQL again? I asked myself. Nope. I’ve seen MongoDB in many CVs and it has recently been a buzzword. I started to learn it from the official courses as recommended by &lt;a href=&quot;https://github.com/icyflame&quot;&gt;@icyflame&lt;/a&gt;. I visited the MongoDB University &lt;a href=&quot;https://university.mongodb.com/&quot;&gt;website&lt;/a&gt; and selected the intro &lt;a href=&quot;https://university.mongodb.com/mercury/M001/2018_May&quot;&gt;course&lt;/a&gt;. It started on May 15 and suppose to end on June 5. They update their resources on weekly basis so that you can have plenty of time on experimenting yourselves and enough time to chill. The syllabus includes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/mongo-syllabus.png&quot; alt=&quot;Syllabus of course&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the major differences that I’ve found in MongoDB with SQL is it uses JSON files for storage which is cute. BSON(Binary JSON) if you want encryption. Also, it is not necessary for a database to have a fixed schema. This one will throw away the concepts of Views in SQL. In case you want to select particular fields, you can create a Projection in MongoDB. There are various operators and filters in MongoDB which makes it powerful to use. Instead of DDL and DML commands in SQL, MongoDB has CRUD operations. We can either use MongoDB Compass or Mongo Shell to execute our queries.&lt;/p&gt;

&lt;p&gt;MongoDB Compass:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/mongodb-compass.png&quot; alt=&quot;MongoDB Compass&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have a look at Mongo Shell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/mongo-shell.png&quot; alt=&quot;Mongo Shell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mostly I was using the Mongo Shell. It is a powerful Javascript interpreter. I created a sandbox atlas cluster for my own experiments which had 512 MB of space and free of cost even though the course had a class cluster by default for learning purpose. The class cluster contained databases which included almost 2 million documents. eg: It contained a video database with a movie collection, a weather database, etc. I explored the huge data throgh MongoDB Compass which is the GUI tool for MongoDB. After connecting to a cluster, it allows us to do all CRUD operations and browse the huge database.&lt;/p&gt;

&lt;p&gt;In case you are familiar with MongoDB, here is a problem for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/mongo-problem.png&quot; alt=&quot;MongoDB Problem&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is my progess in the course:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/mongo-progress.png&quot; alt=&quot;Progress&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At last certificate:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/mongo-certificate.png&quot; alt=&quot;(Certificate on June 5th)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are planning to learn MongoDB, don’t forget to do this course. It’ll give you a good idea on MongoDB AFAIK.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2018/06/01/how-i-spent-may-2018-on-learning-databases/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/01/how-i-spent-may-2018-on-learning-databases/</guid>
      </item>
    
      <item>
        <title>5 Myths about dual booting</title>
        <description>&lt;p&gt;Dual booting a GNU/Linux distro with either Windows or Mac is an important step before ditching them. Don’t worry. Just kidding! It’s all up to you. Here, we’ll talk about 5 myths that are popular among the non-GNU/Linux users.&lt;/p&gt;

&lt;h2 id=&quot;5-myths-about-dual-booting&quot;&gt;5 Myths about dual booting&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;1-system-will-slow-down&quot;&gt;1. System will slow down!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/slow-computer.png&quot; alt=&quot;Slow computer&quot; /&gt;
Surely, you must be kidding. Dual booting has nothing to do with your RAM. Only hard disk is being partitioned. You can allocate desired size to your partitions. It’s all in your hands.&lt;/p&gt;

&lt;h3 id=&quot;2-process-is-too-complex&quot;&gt;2. Process is too complex!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/complex.jpg&quot; alt=&quot;Too complex process&quot; /&gt;
This is another one. If you aren’t a sysadmin, stay away from all these crap that affect your hard disk directly. Shut up! It is true that installing a distro alongside with your default one is not simple as a beginner. But, it’s not too complex or difficult to understand. If you find some time to learn new stuff, enthusiastic enough to break rules and have some courage to experiment, then you are welcome. Today there are several tutorials available to all type of users. It doesn’t matter whether you are a beginner, a noob or whatever.&lt;/p&gt;

&lt;h3 id=&quot;3-highly-prone-to-driver-issues&quot;&gt;3. Highly prone to driver issues!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/error.png&quot; alt=&quot;Error&quot; /&gt;
Many of my friends complain that after dual booting they came across problems like “wifi stopped working”, “printers stopped working”, etc. It happens sometimes. But, there is a holy grail for each and every problem of you. You can report bugs at discussion groups like StackOverflow. Often by a Google search you will get a link to the solution from a discussion group without even asking it by yourself. Try executing the mentioned solutions only by counting the upvotes is the corresponding discussion site. You may have to find some time to fix those issues. But, believe me at last you’ll learn something new for sure.&lt;/p&gt;

&lt;h3 id=&quot;4-battery-drains-too-fast&quot;&gt;4. Battery drains too fast!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/battery-drain.jpg&quot; alt=&quot;Battery drain comic&quot; /&gt;
This is very funny. People often complain that their laptop’s battery drains too fast on using a GNU/Linux distro even with a single booted system. This is not true per se. If you are facing such issues, try installing some system monitoring programs. Stacer is one of them. You can disable the processes that you don’t require using these apps. They’ll show you the current running status graphically. You can easily understand which one is unnecessarily consuming your battery which you’ll be hardly using. For example, the bluetooth will be on by default. It consumes a lot of power.&lt;/p&gt;

&lt;p&gt;This command is also worth giving a shot:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ sudo apt-get install tlp &amp;amp;&amp;amp; sudo tlp start&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;5-takes-time-to-boot&quot;&gt;5. Takes time to boot!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/themousepotato.github.io/master/images/long-time.jpg&quot; alt=&quot;Too time taking process&quot; /&gt;
Some devices will force you to disable Fast boot option in Windows for a successful dual boot. This has nothing to do with the new distro. It’s all decided by the Windows people. We cannot change that as long as they are proprietary.&lt;/p&gt;

</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2018/05/14/5-myths-about-dual-booting/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/14/5-myths-about-dual-booting/</guid>
      </item>
    
      <item>
        <title>An introduction to deployable robotics</title>
        <description>&lt;p&gt;Apps developed using the Robotic Operating System can be made repeatable and reproducible. Why don’t we make them deployable? Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Let’s ship our ROS app using Docker containers.&lt;/p&gt;

&lt;h2 id=&quot;deploying-ros-apps-using-docker&quot;&gt;Deploying ROS apps using Docker&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;what-is-docker-&quot;&gt;What is Docker ?&lt;/h3&gt;
&lt;p&gt;Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. By doing so, thanks to the container, the developer can rest assured that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code.&lt;/p&gt;

&lt;p&gt;Unlike a virtual machine, rather than creating a whole virtual operating system, Docker allows applications to use the same Linux kernel as the system that they’re running on and only requires applications be shipped with things not already running on the host computer. This gives a significant performance boost and reduces the size of the application.&lt;/p&gt;

&lt;h3 id=&quot;why-deploy-ros-apps&quot;&gt;Why deploy ROS apps?&lt;/h3&gt;
&lt;p&gt;Apps developed using the Robotic Operating System can be made repeatable and reproducible. Why don’t we make them deployable? Let’s go through some hardware drivers which want to use ROS tools. They includes cameras, depth cameras, laser cameras, robots, audio, inertial units, GPS, joysticks. Sounds cool :stuck_out_tongue_winking_eye: !&lt;/p&gt;

&lt;p&gt;There are variety of ROS ecosystems also. Have a look at them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TheMousePotato/ROSAppsDeployment/master/images/ecosyss.png&quot; alt=&quot;ROS ecosystems&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s try to combine our areas of interest. First have a look at a normal software development environment matrix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/TheMousePotato/ROSAppsDeployment/raw/master/images/matrix1.png&quot; alt=&quot;Software development matrix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, see how the robotics development progress in a matrix:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/TheMousePotato/ROSAppsDeployment/raw/master/images/matrix2.png&quot; alt=&quot;Robotics development matrix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yuck! Too complex? Time has come to re-invent the convensional approach. The cool thing about docker is that a container has no need to account for the changes in another container. Let’s try to make it simpler to understand. I’m maintaining a container for running apps required for joystick(say). My friend does that for camera. Then, my friend don’t need to bother about dependencies for running my joystick apps. In the same way, I don’t have to keep track of his development. So, I only need to install the libraries for my peripheral and so as my friend. If we are not deploying it using containers, then we have to work on a single space with all the packages installed. The worst thing about this non-deployable robotics is we have to commit each and every update for the libraries unnecessarily. We need to look after the libraries which we have no point of interest. Through containers, things get more simplification. Now the interesting thing comes to action. Our peripherals can still communicate. How? Each container has got an IP address and Docker act as a pathway and provides several network topologies to connect our nodes. Wow! Let’s see it in action.&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-docker-to-ship-ros-apps&quot;&gt;How to use Docker to ship ROS apps?&lt;/h3&gt;
&lt;p&gt;As we have learnt to make things easier so far, let’s try to implement it step by step. Links to installation and proxy setup for Docker are given in the end of this documentation. After that, let’s start.&lt;/p&gt;

&lt;h4 id=&quot;volumes&quot;&gt;Volumes&lt;/h4&gt;
&lt;p&gt;By default Docker uses &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/.ros/&lt;/code&gt; directory to keep track of the logs and debugging info. If you want to change it to your home directory(say ‘ubuntu’), perform :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ docker run -v “/home/ubuntu/.ros/:/root/.ros/” ros&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;devices&quot;&gt;Devices&lt;/h4&gt;
&lt;p&gt;Some application may require device access for acquiring images from connected cameras, control input from human interface device, or GPUS for hardware acceleration. This can be done using the –device run argument to mount the device inside the container, providing processes inside hardware access.&lt;/p&gt;

&lt;h4 id=&quot;networks&quot;&gt;Networks&lt;/h4&gt;
&lt;p&gt;Although one process per container is recommended, Docker networks can also be extended to use several running ROS apps. See documentation on &lt;a href=&quot;http://wiki.ros.org/ROS/NetworkSetup&quot;&gt;NetworkSetup&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;start-by-an-example&quot;&gt;Start by an example&lt;/h3&gt;
&lt;p&gt;For the communication between our ROS nodes, there should be a virtual network. In this short example, we’ll create a virtual network, spin up a new container running roscore advertised as the master service on the new network, then spawn a message publisher and subscriber process as services on the same network.&lt;/p&gt;

&lt;h4 id=&quot;build-image&quot;&gt;Build image&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Build a ROS image that includes ROS tutorials using this &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ros:indigo-ros-base
# install ros tutorials packages
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    ros-indigo-ros-tutorials \
    ros-indigo-common-tutorials \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then to build the image from within the same directory:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build --tag ros:ros-tutorials .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-network&quot;&gt;Create network&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;To create a new network foo, we use the network command:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker network create foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now that we have a network, we can create services. Services advertise there location on the network, making it easy to resolve the location/address of the service specific container. We’ll use this make sure our ROS nodes can find and connect to our ROS master.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;run-services&quot;&gt;Run services&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;To create a container for the ROS master and advertise it’s service:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker run -it --rm \
    --net foo \
    --name master \
    ros:ros-tutorials \
    roscore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now you can see that master is running and is ready manage our other ROS nodes. To add our talker node, we’ll need to point the relevant environment variable to the master service:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run -it --rm \
    --net foo \
    --name talker \
    --env ROS_HOSTNAME=talker \
    --env ROS_MASTER_URI=http://master:11311 \
    ros:ros-tutorials \
    rosrun roscpp_tutorials talker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Then in another terminal, run the listener node similarly:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run -it --rm \
    --net foo \
    --name listener \
    --env ROS_HOSTNAME=listener \
    --env ROS_MASTER_URI=http://master:11311 \
    ros:ros-tutorials \
    rosrun roscpp_tutorials listener
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alright! You should see listener is now echoing each message the talker broadcasting. You can then list the containers and see something like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker service ls
SERVICE ID          NAME                NETWORK             CONTAINER
67ce73355e67        listener            foo                 a62019123321
917ee622d295        master              foo                 f6ab9155fdbe
7f5a4748fb8d        talker              foo                 e0da2ee7570a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;And for the services:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS              PORTS               NAMES
a62019123321        ros:ros-tutorials   &quot;/ros_entrypoint.sh    About a minute ago   Up About a minute   11311/tcp           listener
e0da2ee7570a        ros:ros-tutorials   &quot;/ros_entrypoint.sh    About a minute ago   Up About a minute   11311/tcp           talker
f6ab9155fdbe        ros:ros-tutorials   &quot;/ros_entrypoint.sh    About a minute ago   Up About a minute   11311/tcp           master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;introspection&quot;&gt;Introspection&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ok, now that we see the two nodes are communicating, let get inside one of the containers and do some introspection what exactly the topics are:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker exec -it master bash
  source /ros_entrypoint.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If we then use rostopic to list published message topics, we should see something like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  rostopic list
/chatter
/rosout
/rosout_agg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;tear-down&quot;&gt;Tear down&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;To tear down the structure we’ve made, we just need to stop the containers and the services. We can stop and remove the containers using Ctrl^C where we launched the containers or using the stop command with the names we gave them:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker stop master talker listener
  docker rm master talker listener
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;compose&quot;&gt;Compose&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now that you have an appreciation for bootstrapping a distributed ROS example manually, lets try and automate it using docker-compose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Start by making a folder named rostutorials and moving the Dockerfile we used earlier inside this directory. Then create a yaml file named docker-compose.yml in the same directory and paste the following inside:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'
services:
  master:
    build: .
    container_name: master
    command:
      - roscore
  
  talker:
    build: .
    container_name: talker
    environment:
      - &quot;ROS_HOSTNAME=talker&quot;
      - &quot;ROS_MASTER_URI=http://master:11311&quot;
    command: rosrun roscpp_tutorials talker
  
  listener:
    build: .
    container_name: listener
    environment:
      - &quot;ROS_HOSTNAME=listener&quot;
      - &quot;ROS_MASTER_URI=http://master:11311&quot;
    command: rosrun roscpp_tutorials listener
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Now from inside the same folder, use docker-copose to launch our ROS nodes and specify that they coexist on their own network:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notice that a new network named rostutorials_default has now been created, you can inspect it further with:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker network inspect rostutorials_default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can monitor the logged output of each service, such as the listener node like so:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose logs listener
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally, we can stop and remove all the relevant containers using docker-copose from the same directory:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker-compose stop
  docker-compose rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: the auto-generated network, rostutorials_default, will persist over the life of the docker engine or until you explicitly remove it using docker network rm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Let’s have a look at a funny cartoon on convensional approach on robotics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/TheMousePotato/ROSAppsDeployment/raw/master/images/cartoon2.jpg&quot; alt=&quot;Cartoon making fun of convensional robotics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, see how it has changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/TheMousePotato/ROSAppsDeployment/raw/master/images/simplify.png&quot; alt=&quot;Image of deployable robotics&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-ros-apps-shipped-using-docker&quot;&gt;Some ROS apps shipped using Docker&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ruffsl/ros_caffe/tree/master/docker&quot;&gt;Caffe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ruffsl/gazebo_docker_demos&quot;&gt;Gazemo demos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference-and-further-reading&quot;&gt;Reference and further reading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04&quot;&gt;Docker for beginners - tutorial by DigitalOcean&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wsargent/docker-cheat-sheet&quot;&gt;Docker cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23111631/cannot-download-docker-images-behind-a-proxy&quot;&gt;Configuring network proxy for using Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://registry.hub.docker.com/_/ros/&quot;&gt;Official Docker library for ROS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/samples/library/ros/&quot;&gt;Official documentation from Docker on ROS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.ros.org/docker&quot;&gt;Official documentation from ROS on Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.osrfoundation.org/&quot;&gt;Official website of Open Robotics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rosorg.slack.com/messages/docker/&quot;&gt;Docker on ROS slack channel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://answers.ros.org/questions/scope:all/sort:activity-desc/tags:Docker/page:1/&quot;&gt;FAQ on Docker at ROS website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 11 Apr 2018 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/2018/04/11/ros-docker/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/11/ros-docker/</guid>
      </item>
    
  </channel>
</rss>
